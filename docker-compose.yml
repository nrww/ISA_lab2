version: '2.1'

services:
  db-node-1:
    build:
      context: mariadb
      dockerfile: Dockerfile
    container_name: db-node-1
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: service_db
      MYSQL_USER: stud
      MYSQL_PASSWORD: stud
      MYSQL_ROOT_PASSWORD: '1'
    command: >
      --sql-mode='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
      --general-log=ON
      --log-queries-not-using-indexes=ON
      --init-file /data/application/init.sql
      --character-set-server=utf8mb4
    networks:
      - arch-network
    ports:
      - 3360:3306
    healthcheck:
      test: "/usr/bin/mariadb --user=stud --password=stud --execute \"SHOW DATABASES;\""
      interval: 15s
      timeout: 1s
      retries: 5
    volumes:
      - db-node-1-data:/var/lib/mysql
      - ./init.sql:/data/application/init.sql

  db-node-2:
    build:
      context: mariadb
      dockerfile: Dockerfile
    container_name: db-node-2
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: service_db
      MYSQL_USER: stud
      MYSQL_PASSWORD: stud
      MYSQL_ROOT_PASSWORD: '1'
    command: >
      --sql-mode='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
      --general-log=ON
      --log-queries-not-using-indexes=ON
      --init-file /data/application/init.sql
      --character-set-server=utf8mb4
    networks:
      - arch-network
    ports:
      - 3360:3306
    healthcheck:
      test: "/usr/bin/mariadb --user=stud --password=stud --execute \"SHOW DATABASES;\""
      interval: 15s
      timeout: 1s
      retries: 5
    volumes:
      - db-node-2-data:/var/lib/mysql
      - ./init.sql:/data/application/init.sql


  proxysql:
    build:
      context: proxysql
      dockerfile: Dockerfile
    container_name: proxysql
    command: >
      --initial
    volumes:
      - proxysql-data:/var/lib/proxysql
    healthcheck:
      test: "/usr/bin/mysql --user=stud --password=stud --execute \"SHOW DATABASES;\""
      timeout: 20s
      retries: 5
    networks:
      - arch-network
    ports:
      # Mysql Client Port
      - "6033:6033"
      # Mysql Admin Port
      - "6032:6032"
    depends_on:
      db-node-1:
        condition: service_healthy
      db-node-2:
        condition: service_healthy

  user_service:
    build:
      context: user_service
      dockerfile: Dockerfile
    container_name: user_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=service_db
    ports:
      - 8081:8081
    healthcheck:
      test: curl -sS http://localhost:8081/ || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - arch-network
    depends_on:
      proxysql:
        condition: service_healthy
        
  services_service:
    build:
      context: services_service
      dockerfile: Dockerfile
    container_name: services_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=service_db
    ports:
      - 8082:8082
    healthcheck:
      test: curl -sS http://localhost:8082/ || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - arch-network
    depends_on:
      proxysql:
        condition: service_healthy
      user_service:
        condition: service_healthy

  order_service:
    build:
      context: order_service
      dockerfile: Dockerfile
    container_name: order_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=service_db
    ports:
      - 8083:8083
    healthcheck:
      test: curl -sS http://localhost:8083/ || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - arch-network
    depends_on:
      proxysql:
        condition: service_healthy
      user_service:
        condition: service_healthy
      services_service:
        condition: service_healthy

  chat_service:
    build:
      context: chat_service
      dockerfile: Dockerfile
    container_name: chat_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=service_db
    ports:
      - 8084:8084
    healthcheck:
      test: curl -sS http://localhost:8084/ || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - arch-network
    depends_on:
      proxysql:
        condition: service_healthy
      user_service:
        condition: service_healthy
      order_service:
        condition: service_healthy
volumes:
  db-node-1-data:
  db-node-2-data:
  proxysql-data:

networks:
  arch-network:
    driver: "bridge"
    external: false