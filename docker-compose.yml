version: '3.3'

services:

  db-node-1:
    build:
      context: mariadb
      dockerfile: Dockerfile
    container_name: db-node-1
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: service_db
      MYSQL_USER: stud
      MYSQL_PASSWORD: stud
      MYSQL_ROOT_PASSWORD: '1'
    command: >
      --init-file /data/application/init.sql
      --character-set-server=utf8mb4
    networks:
      - arch-network
    ports:
      - 3360:3306
    healthcheck:
      test: "/usr/bin/mariadb --user=stud --password=stud --execute \"SHOW DATABASES;\""
      interval: 15s
      timeout: 1s
      retries: 5
    volumes:
      - db-node-1-data:/var/lib/mysql
      - ./init.sql:/data/application/init.sql

  db-node-2:
    build:
      context: mariadb
      dockerfile: Dockerfile
    container_name: db-node-2
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: service_db
      MYSQL_USER: stud
      MYSQL_PASSWORD: stud
      MYSQL_ROOT_PASSWORD: '1'
    command: >
      --init-file /data/application/init.sql
      --character-set-server=utf8mb4
    networks:
      - arch-network
    ports:
      - 3361:3306
    healthcheck:
      test: "/usr/bin/mariadb --user=stud --password=stud --execute \"SHOW DATABASES;\""
      interval: 15s
      timeout: 1s
      retries: 5
    volumes:
      - db-node-2-data:/var/lib/mysql
      - ./init.sql:/data/application/init.sql


  proxysql:
    build:
      context: proxysql
      dockerfile: Dockerfile
    container_name: proxysql
    command: >
      --initial
    volumes:
      - proxysql-data:/var/lib/proxysql
    healthcheck:
      test: "mysql --user=admin --password=admin -h 127.0.0.1 --port=6032 --execute \"SHOW DATABASES;\""
      timeout: 20s
      retries: 5
    networks:
      - arch-network
    ports:
      # Mysql Client Port
      - "6033:6033"
      # Mysql Admin Port
      - "6032:6032"
    depends_on:
      db-node-1:
        condition: service_healthy
      db-node-2:
        condition: service_healthy

  cache:
    build:
      context: redis
      dockerfile: Dockerfile
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning 
    networks:
      - arch-network
    volumes: 
      - cache:/data
  kafka1:
      image: 'bitnami/kafka:latest'
      container_name: kafka1
      ports:
      #   - "2181:2181"
         - "9092:9092"
      #   - "9093:9093"
      environment:
        KAFKA_ENABLE_KRAFT: "yes"
        KAFKA_CFG_PROCESS_ROLES: "broker,controller"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
        KAFKA_BROKER_ID: 1
        KAFKA_CFG_NODE_ID: 1
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
        ALLOW_PLAINTEXT_LISTENER: "yes"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
      volumes:
        - kafka_volume1:/bitnami/kafka
      networks:
        - arch-network
    
  kafka2:
      image: 'bitnami/kafka:latest'
      container_name: kafka2
      # ports:
      #   - "2181:2181"
      #   - "9092:9092"
      #   - "9093:9093"
      environment:
        KAFKA_ENABLE_KRAFT: "yes"
        KAFKA_CFG_PROCESS_ROLES: "broker,controller"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:9092"
        KAFKA_BROKER_ID: 2
        KAFKA_CFG_NODE_ID: 2
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
        ALLOW_PLAINTEXT_LISTENER: "yes"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
      volumes:
        - kafka_volume2:/bitnami/kafka
      networks:
        - arch-network

  kafka-ui:
      image: provectuslabs/kafka-ui:v0.4.0
      ports:
        - "8888:8080"
      environment:
        KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092"
        KAFKA_CLUSTERS_0_NAME: "kraft"
      networks:
        - arch-network

  user_service:
    build:
      context: user_service
      dockerfile: Dockerfile
    container_name: user_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=service_db
      - SHARDS_COUNT=2
      - CACHE=cache:6379
      - QUEUE_HOST=kafka1:9092
      - QUEUE_TOPIC=event_server
      - QUEUE_GROUP_ID=0
    ports:
      - 8081:8081
    healthcheck:
      test: curl -sS http://localhost:8081/ || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - arch-network
    depends_on:
      proxysql:
        condition: service_healthy
      cache:
        condition: service_started
      writer_service:
        condition: service_started
  
  writer_service:
    build:
      context: writer_service
      dockerfile: Dockerfile
    container_name: writer_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=service_db
      - SHARDS_COUNT=2
      - CACHE=cache:6379
      - QUEUE_HOST=kafka1:9092
      - QUEUE_TOPIC=event_server
      - QUEUE_GROUP_ID=0
    networks:
      - arch-network
    depends_on:
      proxysql:
        condition: service_healthy
      cache:
        condition: service_started
      kafka1:
        condition: service_started
      kafka2:
        condition: service_started

        
  services_service:
    build:
      context: services_service
      dockerfile: Dockerfile
    container_name: services_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=service_db
      - SHARDS_COUNT=2
      - CACHE=cache:6379
    ports:
      - 8082:8082
    healthcheck:
      test: curl -sS http://localhost:8082/ || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - arch-network
    depends_on:
      proxysql:
        condition: service_healthy
      user_service:
        condition: service_healthy


  order_service:
    build:
      context: order_service
      dockerfile: Dockerfile
    container_name: order_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=service_db
      - SHARDS_COUNT=2
      - CACHE=cache:6379
    ports:
      - 8083:8083
    healthcheck:
      test: curl -sS http://localhost:8083/ || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - arch-network
    depends_on:
      proxysql:
        condition: service_healthy
      user_service:
        condition: service_healthy
      services_service:
        condition: service_healthy


  chat_service:
    build:
      context: chat_service
      dockerfile: Dockerfile
    container_name: chat_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=service_db
      - SHARDS_COUNT=2
      - CACHE=cache:6379
    ports:
      - 8084:8084
    healthcheck:
      test: curl -sS http://localhost:8084/ || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - arch-network
    depends_on:
      proxysql:
        condition: service_healthy
      user_service:
        condition: service_healthy
      order_service:
        condition: service_healthy
volumes:
  db-node-1-data:
  db-node-2-data:
  proxysql-data:
  kafka_volume1:
  kafka_volume2:
  cache:

networks:
  arch-network:
    driver: "bridge"
    external: false